#!/bin/bash

[ -e /boot/cmdline.new ] && cp /boot/cmdline.new /boot/cmdline.default

bp="$(grep -w /boot /etc/fstab | awk '{print $1}')"
[ -z "$bp" ] && bp=/dev/mmcblk0p1

rmlibshairport(){
    if [ -e /var/lib/dpkg/info/xbian-package-libshairport.postrm ]; then
        grep -wq "exit" /var/lib/dpkg/info/xbian-package-libshairport.postrm || echo "exit 0" >> /var/lib/dpkg/info/xbian-package-libshairport.postrm
    fi
}

xbianGroups(){
    grep -wq input /etc/group || groupadd input || :
    grep -wq video /etc/group || groupadd video || :
    grep -wq audio /etc/group || groupadd audio || :

    usermod -a -G audio,video,input xbian
}

adaptAdvancedSettings(){
            if [ "$(stat --printf="%s" /home/xbian/.xbmc/userdata/advancedsettings.xml)" -eq 0 ]; then
cat << \EOF > /home/xbian/.xbmc/userdata/advancedsettings.xml
<advancedsettings>
   <network>
        <cachemembuffersize>20971520</cachemembuffersize>
   </network>
   <fanartres>720</fanartres>
   <imageres>540</imageres>
   <gputempcommand>echo "$(/opt/vc/bin/vcgencmd measure_temp | grep -o "[0-9]\{2\}") C"</gputempcommand>
   <cputempcommand>echo "$(/opt/vc/bin/vcgencmd measure_temp | grep -o "[0-9]\{2\}") C"</cputempcommand>
   <lookandfeel>
        <webserver>true</webserver>
        <guires>720</guires>
   </lookandfeel>
   <bginfoloadermaxthreads>5</bginfoloadermaxthreads>
   <video>
     <adjustrefreshrate>
       <override>
         <fps>23.976</fps>
         <refresh>24.0</refresh>
       </override>
     </adjustrefreshrate>
   </video>
    <gui>
        <algorithmdirtyregions>3</algorithmdirtyregions>
        <nofliptimeout>0</nofliptimeout>
        <visualizedirtyregions>false</visualizedirtyregions>
    </gui>
    <destroywindowcontrols>0</destroywindowcontrols>
    <useddsfanart>0</useddsfanart>
</advancedsettings>
EOF
            fi

            #sed -i --follow-symlinks 's/<guires>1080<\/guires>/<guires>720<\/guires>/g' /home/xbian/.xbmc/userdata/advancedsettings.xml
            sed -i --follow-symlinks 's/<bginfoloadermaxthreads>.*<\/bginfoloadermaxthreads>/<bginfoloadermaxthreads>5<\/bginfoloadermaxthreads>/g' /home/xbian/.xbmc/userdata/advancedsettings.xml >/dev/null 2>&1 

            grep -v "<destroywindowcontrols>\|<useddsfanart>\|<visualizedirtyregions>\|<streamsilence>\|</advancedsettings>\|<algorithmdirtyregions>\|<nofliptimeout>" /home/xbian/.xbmc/userdata/advancedsettings.xml > /home/xbian/.xbmc/userdata/advancedsettings.xml.new
            echo "
    <gui>
        <algorithmdirtyregions>3</algorithmdirtyregions>
        <nofliptimeout>0</nofliptimeout>
        <visualizedirtyregions>false</visualizedirtyregions>
    </gui>
    <destroywindowcontrols>0</destroywindowcontrols>
    <useddsfanart>0</useddsfanart>
</advancedsettings>
" >> /home/xbian/.xbmc/userdata/advancedsettings.xml.new

            cat /home/xbian/.xbmc/userdata/advancedsettings.xml.new | tr '\n' '%' | sed 's/<gui>%\ *<\/gui>//g' | sed 's/<audio>%\ *<\/audio>//g' | tr '%' '\n' | sed '/^\s*$/d' > /home/xbian/.xbmc/userdata/advancedsettings.xml
            chown xbian:xbian /home/xbian/.xbmc/userdata/advancedsettings.xml >/dev/null 2>&1 
            rm -f /home/xbian/.xbmc/userdata/advancedsettings.xml.new

}

rmo(){

echo "removing non-used services"

for f in avahi-daemon.override \
bootmisc.sh.conf \
udev-finish.override \
udev-finish.conf \
mountall-net.conf \
checkfs.sh.conf \
checkroot-bootclean.sh.conf \
checkroot.sh.conf \
console.conf \
cron.override \
mountall-bootclean.sh.conf \
mountall.sh.conf \
mountdevsubfs.sh.conf \
mountkernfs.sh.conf \
mountnfs.sh.conf \
mtab.sh.conf \
network-interface-container.conf \
network-interface-security.conf \
network-interface-security.override \
portmap-wait.conf \
progress-reboot.conf \
mountall-shell.conf \
mounted-debugfs.conf \
mounted-dev.conf \
mounted-proc.conf \
mounted-proc.override \
mounted-var.conf \
mountnfs-bootclean.sh.conf \
rpcbind-boot.conf \
rpcbind.conf \
rpcbind-boot.override \
startpar-bridge.conf \
statd-mounting.conf \
statd-mounting.override \
tty3.conf \
tty3.override \
tty4.conf \
tty4.override \
tty5.conf \
tty5.override \
tty6.conf \
tty6.override \
ssh.conf \
ssh.override \
udev-fallback-graphics.conf \
udev-fallback-graphics.override \
udevmonitor.conf \
udevmonitor.override \
xbian-waiter.conf \
ssh.conf \
ssh.override \
progress-mounted.conf \
progress-mounting.conf \
xbian-fstab.conf \
xbian.functions \
container-detect.conf \
container-detect.override; do rm -fr /etc/init/$f; done

for f in bootmisc.sh \
checkroot-bootclean.sh \
checkroot.sh \
hostname.sh \
mountall-bootclean.sh \
mountall.sh \
mountdevsubfs.sh \
mountkernfs.sh \
mountnfs-bootclean.sh \
mountnfs.sh \
dbus \
mtab.sh \
networking \
hostname.sh \
mountkernfs.sh \
mountdevsubfs.sh \
checkroot.sh \
avahi-daemon \
rmnologin \
cron \
ssh \
kmod \
lirc \
motd \
openbsd-inetd \
procps \
udev \
fake-hwclock \
udev-mtab \
autofs \
urandom; do 
    rm -fr /etc/init.d/$f
    ln -s /lib/init/upstart-job /etc/init.d/$f 
done

rm -fr /etc/apt/apt.conf.d/20archive 
rm -fr /lib/udev/rules.d/10-local-rpi.rules
rm -fr /etc/update-motd.d/updates-notify
rm -fr /etc/cron.daily/apt-show-versions
rm -fr /lib/udev/rules.d/99-local-xbian.rules

}

if [ $1 == "configure" ]; then

	rm /home/xbian/xbian-update.log >/dev/null 2>&1

        version1011() {

	echo "installing update to 1.0-1.1"; 

	echo "3) Turning off rainbow screen"

	if [ -f /boot/config.txt ]; then
		if grep -q "disable_splash=1" /boot/config.txt;	then
		        echo "Notice: rainbow already off" >> /home/xbian/xbian-update.log;
	        else
                	echo -e "\ndisable_splash=1\n" >> /boot/config.txt
			if grep -q "disable_splash=1" /boot/config.txt; then
				echo "Success: rainbow off" >> /home/xbian/xbian-update.log; 
			else
				echo "Error: rainbow off" >> /home/xbian/xbian-update.log; 
			fi
		fi
	fi

	grep "rootfstype=ext4" /proc/cmdline && tune2fs -L xbian-root-btrfs $(findmnt -n -o SOURCE /)

	echo "4) Changing default overclock"

	if [ -f /boot/config.txt ]; then
		if [ $(grep "core_freq=375" /boot/config.txt| wc -l) -eq 1 ];	then
			sed -i 's/core_freq=375/core_freq=275/g' /boot/config.txt
			if [ $(grep "core_freq=275" /boot/config.txt | wc -l) -eq 1 ];	then
				echo "Success: changed core_freq to 275" >> /home/xbian/xbian-update.log; 
			else
				echo "Error: failed to set core_freq to 275" >> /home/xbian/xbian-update.log; 
			fi
		else
			echo "Notice: core_freq 275 already set" >> /home/xbian/xbian-update.log; 
		fi
	fi

	echo "5) Changing fanartres"

	if [ $(grep "<fanartres>540</fanartres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
		sed -i --follow-symlinks 's:<fanartres>540</fanartres>:<fanartres>720</fanartres>:g' /home/xbian/.xbmc/userdata/advancedsettings.xml >/dev/null 2>&1 
		if [ $(grep "<fanartres>720</fanartres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
			echo "Success: changed fanartres to 720" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to set fanartres to 720" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: detected a manual fanartres setting, not changing" >> /home/xbian/xbian-update.log; 
	fi

	echo "6) Changing imagres"

	if [ $(grep "<imageres>256</imageres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
		sed -i --follow-symlinks 's:<imageres>256</imageres>:<imageres>540</imageres>:g' /home/xbian/.xbmc/userdata/advancedsettings.xml >/dev/null 2>&1 
		if [ $(grep "<imageres>540</imageres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
			echo "Success: changed imageres to 540" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to set imageres to 540" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: detected a manual fanartres setting, not changing" >> /home/xbian/xbian-update.log; 
	fi

	echo "7) Adding SuperRepo"

	if [ $(grep "<name>SuperRepo.org Virtual Disk</name>" /home/xbian/.xbmc/userdata/sources.xml| wc -l) -eq 0 ];	then
        sed -i --follow-symlinks 's|<files>|<files>\n\t<default pathversion="1"></default>\n\t\t<name>SuperRepo.org Virtual Disk</name>\n\t\t<path pathversion="1">http://use.superrepo.org/Frodo</path>|g' /home/xbian/.xbmc/userdata/sources.xml
		if [ $(grep "<name>SuperRepo.org Virtual Disk</name>" /home/xbian/.xbmc/userdata/sources.xml| wc -l) -eq 1 ];	then
			echo "Success: changed Fusion to SuperRepo" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to change Fusion to SuperRepo" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: Fusion already replaced by SuperRepo" >> /home/xbian/xbian-update.log; 
	fi

	echo "8) Modifying avahi-deamon defaults"

	if [ $(grep "AVAHI_DAEMON_DETECT_LOCAL=1"  /etc/default/avahi-daemon| wc -l) -eq 1 ];	then
		sed -i --follow-symlinks 's:AVAHI_DAEMON_DETECT_LOCAL=1:AVAHI_DAEMON_DETECT_LOCAL=0:g' /etc/default/avahi-daemon
		if [ $(grep "AVAHI_DAEMON_DETECT_LOCAL=0" /etc/default/avahi-daemon| wc -l) -eq 1 ];	then
			echo "Success: modified avahi-deamon defaults" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to modified avahi-deamon defaults" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: avahi-deamon defaults already modified" >> /home/xbian/xbian-update.log; 
	fi

	echo "9) Disable watchdog"

	if [ $(grep "run_watchdog=1"  /etc/default/watchdog| wc -l) -eq 1 ];	then
		sed -i --follow-symlinks 's:run_watchdog=1:run_watchdog=0:g' /etc/default/watchdog
                update-rc.d watchdog remove >/dev/null 2>&1
                sed -i --follow-symlinks '/bcm2708_wdog/d' /etc/modules
		if [ $(grep "run_watchdog=0" /etc/default/watchdog| wc -l) -eq 1 ];	then
			echo "Success: disabled watchdog" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to disable watchdog" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: watchdog already disabled" >> /home/xbian/xbian-update.log; 
	fi

    echo "10) Symlink /usr/lib/vfp to /opt/vc/lib"

    if [ -f "/usr/lib/vfp" -o  -d "/usr/lib/vfp" ];	then
        rm -r /usr/lib/vfp
        if [ -f "/usr/lib/vfp" -o  -d "/usr/lib/vfp" ];	then
            echo "Error: failed to remove /usr/lib/vfp" >> /home/xbian/xbian-update.log;
        fi
    fi

    ln -s /opt/vc/lib /usr/lib/vfp
    if [ -L "/usr/lib/vfp" ];	then
        echo "Success: symlinked /usr/lib/vfp to /opt/vc/lib" >> /home/xbian/xbian-update.log;
    else
        echo "Failed: to symlink /usr/lib/vfp to /opt/vc/lib" >> /home/xbian/xbian-update.log;
    fi

    echo "11) Enable auto fsck on boot"

    if [ $(grep "#FSCKFIX=no" /etc/default/rcS| wc -l) -eq 1 ];	then
        sed -i --follow-symlinks 's/#FSCKFIX=no/FSCKFIX=yes/g' /etc/default/rcS
        if [ $(grep "^FSCKFIX=yes" /etc/default/rcS| wc -l) -eq 1 ];	then
            echo "Success: enable auto fsck on boot" >> /home/xbian/xbian-update.log;
        else
            echo "Error: enable auto fsck on boot" >> /home/xbian/xbian-update.log;
        fi
    else
        echo "Notice: enable auto fsck on boot already set" >> /home/xbian/xbian-update.log;
    fi

    echo "12) Disabling DELAYLOGIN service"

    if [ $(grep -c ^"DELAYLOGIN=no" /etc/default/rcS) -eq 1 ]; then
        echo "Notice: DELAYLOGIN already disabled" >> /home/xbian/xbian-update.log
    else
        sed -i --follow-symlinks 's/DELAYLOGIN=yes/DELAYLOGIN=no/g' /etc/default/rcS
        sed -i --follow-symlinks 's/#DELAYLOGIN=no/DELAYLOGIN=no/g' /etc/default/rcS
        sed -i --follow-symlinks 's/#DELAYLOGIN=yes/DELAYLOGIN=no/g' /etc/default/rcS
        if [ $(grep -c ^"DELAYLOGIN=no" /etc/default/rcS) -eq 0 ]; then
            echo "DELAYLOGIN=no" >> /etc/default/rcS
        fi

        echo "Success: disabled DELAYLOGIN" >> /home/xbian/xbian-update.log
    fi

    echo "13) Remove klogd & sysklogd from update-rc.d"
    update-rc.d klogd remove >/dev/null 2>&1;
    update-rc.d sysklogd remove >/dev/null 2>&1;

    echo "14a) Removing swapfile from /etc/fstab"

    if [ $(grep '/var/swapfile' /etc/fstab| wc -l) -eq 1 ];	then
        sed -i --follow-symlinks '/\/var\/swapfile/d' /etc/fstab
        if [ $(grep '/var/swapfile' /etc/fstab| wc -l) -eq 0 ];	then
            echo "Success: removing swapfile from /etc/fstab" >> /home/xbian/xbian-update.log;

            echo "14b) Removing /var/swapfile"

            if [ -f "/var/swapfile" ];	then
                swapoff /var/swapfile
                rm /var/swapfile
                if [ ! -f "/var/swapfile" ];	then
                    echo "Success: removing /var/swapfile" >> /home/xbian/xbian-update.log;
                else
                    echo "Error: removing /var/swapfile" >> /home/xbian/xbian-update.log;
                fi
            else
                echo "Notice: /var/swapfile already removed" >> /home/xbian/xbian-update.log;
            fi

        else
            echo "Error: removing swapfile from /etc/fstab" >> /home/xbian/xbian-update.log;
        fi
    else
            echo "Notice: swapfile already removed from /etc/fstab" >> /home/xbian/xbian-update.log;
    fi

    echo "15) Adding /boot to /etc/fstab"

    if [ $(grep /boot /etc/fstab | grep -c "noauto,user,uid=0,gid=0") -eq 0 ];	then
        grep -v /boot /etc/fstab > /etc/fstab.new; mv /etc/fstab.new /etc/fstab
        echo "UUID=$(blkid $bp -o value -s UUID)	/boot	vfat	defaults,noauto,user,gid=0,uid=0	0	0" >> /etc/fstab
        if [ $(grep -c /boot /etc/fstab ) -eq 1 ]; then
            echo "Success: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log;

        else
            echo "Error: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log;
        fi
    else
            echo "Notice: /boot already present in /etc/fstab" >> /home/xbian/xbian-update.log;
    fi

	echo "16) Applying patches"

cat <<\EOF > /tmp/001-tmpfs.patch
--- a/etc/default/tmpfs
+++ b/etc/default/tmpfs
@@ -8,25 +8,25 @@
 # mount /run/lock as a tmpfs (separately from /run).  Defaults to yes;
 # set to no to disable (/run/lock will then be part of the /run tmpfs,
 # if available).
-#RAMLOCK=yes
+RAMLOCK=yes
 
 # mount /run/shm as a tmpfs (separately from /run).  Defaults to yes;
 # set to no to disable (/run/shm will then be part of the /run tmpfs,
 # if available).
-#RAMSHM=yes
+RAMSHM=yes
 
 # mount /tmp as a tmpfs.  Defaults to no; set to yes to enable (/tmp
 # will be part of the root filesystem if disabled).  /tmp may also be
 # configured to be a separate mount in /etc/fstab.
-#RAMTMP=no
+RAMTMP=no
 
 # Size limits.  Please see tmpfs(5) for details on how to configure
 # tmpfs size limits.
 #TMPFS_SIZE=20%VM
-#RUN_SIZE=10%
-#LOCK_SIZE=5242880 # 5MiB
-#SHM_SIZE=
-#TMP_SIZE=
+RUN_SIZE=10240
+LOCK_SIZE=5120
+SHM_SIZE=2048
+#TMP_SIZE=20480
 
 # Mount tmpfs on /tmp if there is less than the limit size (in kiB) on
 # the root filesystem (overriding RAMTMP).
EOF

	patch --dry-run /etc/default/tmpfs < /tmp/001-tmpfs.patch 2>/dev/null >/dev/null;
	if [ $? == 0 ]; then
		patch /etc/default/tmpfs < /tmp/001-tmpfs.patch 2>/dev/null >/dev/null;
		echo "Success: applied 001-tmpfs.patch" >> /home/xbian/xbian-update.log;
	else
		echo "Error: 001-tmpfs.patch can't be applied" >> /home/xbian/xbian-update.log;
	fi
	echo "001-tmpfs.patch done"

cat <<\EOF > /tmp/002-sysctl.patch
--- a/etc/sysctl.conf
+++ b/etc/sysctl.conf
@@ -4,7 +4,7 @@
 # See sysctl.conf (5) for information.
 #
 
-#kernel.domainname = example.com
+kernel.domainname = private
 
 # Uncomment the following to stop low-level messages on console
 kernel.printk = 3 4 1 3
@@ -60,5 +60,11 @@
 #
 
 # rpi tweaks
-vm.swappiness=1
-vm.min_free_kbytes = 8192
+vm.swappiness = 70
+vm.dirty_ratio = 65
+vm.dirty_background_ratio = 40
+vm.vfs_cache_pressure = 150
+vm.min_free_kbytes = 16384
+kernel.msgmax = 65536
+kernel.msgmnb = 65536
+kernel.sem = 250 256000 32 1024
EOF

	patch --dry-run /etc/sysctl.conf < /tmp/002-sysctl.patch 2>/dev/null >/dev/null;
	if [ $? == 0 ]; then
		patch /etc/sysctl.conf < /tmp/002-sysctl.patch 2>/dev/null >/dev/null;
		echo "Success: applied 002-sysctl.patch" >> /home/xbian/xbian-update.log;
	else
		echo "Error: 002-sysctl.patch can't be applied" >> /home/xbian/xbian-update.log;
	fi
	echo "002-sysctl.patch done"

	ldconfig >/dev/null 2>&1

	echo "17) updating sysv init scripts and adapting system"
	
        insserv -fr /etc/init.d/checkfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/checkroot.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountall-bootclean.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountall.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountdevsubfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountkernfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountnfs-bootclean.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mtab.sh > /dev/null 2>&1

	insserv -fr /etc/init.d/urandom > /dev/null 2>&1
	insserv -fr /etc/init.d/hdparm > /dev/null 2>&1
	insserv -fr /etc/init.d/rmnologin > /dev/null 2>&1
	insserv -fr /etc/init.d/udev-mtab > /dev/null 2>&1
	insserv -fr /etc/init.d/watchdog > /dev/null 2>&1
	insserv -fr /etc/init.d/xbmc > /dev/null 2>&1
	insserv -fr /etc/init.d/console-screen.sh > /dev/null 2>&1
	insserv -fr /etc/init.d/kbd > /dev/null 2>&1
	insserv -fr /etc/init.d/keyboard-setup > /dev/null 2>&1
	insserv -fr /etc/init.d/wd_keepalive > /dev/null 2>&1
	insserv -fr /etc/init.d/plymouth > /dev/null 2>&1
	insserv -fr /etc/init.d/plymouth-log > /dev/null 2>&1
	insserv -fr /etc/init.d/sudo > /dev/null 2>&1
	insserv -rf /etc/init.d/avahi-daemon > /dev/null 2>&1
	insserv -rf /etc/init.d/udev > /dev/null 2>&1
	insserv -rf /etc/init.d/ntp > /dev/null 2>&1
	insserv -f > /dev/null 2>&1

        test -e /etc/inittab && mv /etc/inittab /etc/inittab.dist
        rm -f /etc/nologin
        rm -fr /var/tmp/{init,init.d,to_remove,etc} 
	echo "Success: sysvinit and initctl updated" >> /home/xbian/xbian-update.log

	echo "18) removing obsolete files"
	rm -f /usr/local/lib/libtag.a
	rm -f /usr/local/lib/libtag_c.a
	echo "Success: files removed" >> /home/xbian/xbian-update.log

        echo "1.0Beta1" > /etc/xbian_version

	#echo "---UPDATE LOG---"
	#cat "/home/xbian/xbian-update.log"
        }
############################# patchPolkit ######################################
patchPolkit() {
        echo "patching polkit"
	cd /usr/share/polkit-1/actions

cat << \EOF > /tmp/udisks.patch
--- org.freedesktop.udisks.policy       2012-08-01 00:00:00.000000000 +0200
+++ org.freedesktop.udisks.policy.new   2013-06-30 20:10:16.000000000 +0200
@@ -81,7 +81,7 @@
     <message xml:lang="de">Zugriffsrechte werden benötigt um ein Gerät auszuhängen, das ein anderer Benutzer eingehängt hat</message>
     <message xml:lang="pt_BR">Autenticação é requerida para desmontar dispositivos montados por um outro usuário</message>
     <defaults>
-      <allow_any>no</allow_any>
+      <allow_any>yes</allow_any>
       <allow_inactive>no</allow_inactive>
       <allow_active>auth_admin</allow_active>
     </defaults>
EOF

	if patch -N --dry-run ./org.freedesktop.udisks.policy < /tmp/udisks.patch > /dev/null 2>&1; then
	    patch -s ./org.freedesktop.udisks.policy < /tmp/udisks.patch || echo "udisks patch failed" >> /home/xbian/xbian-update.log
	fi
	rm -fr /tmp/udisks.patch
}

############################## 1.0-1.1 END   ###################################
        1011f() {
        echo "checking for Beta 1.1 hotfix"
        ! grep -xq "1.0Beta1.1" /etc/xbian_version 2>/dev/null||  return 0
        [ ! -e /tmp/xbian_revision.old ] || { [ "$(cat /tmp/xbian_revision.old | grep -m1 .)" -lt 10 ] || return 0; }

        echo "updating to 1.0 Beta 1.1 hotfix"
	echo "1.0Beta1.1" > /etc/xbian_version

	insserv -rf /etc/init.d/avahi-daemon > /dev/null 2>&1

	locale-gen

    if [ $(grep /boot /etc/fstab | grep -c "noauto") -eq 1 ];	then
        grep -v /boot /etc/fstab > /etc/fstab.new; mv /etc/fstab.new /etc/fstab
        echo "UUID=$(blkid $bp -o value -s UUID)	/boot	vfat	defaults 	0	0" >> /etc/fstab
        if [ $(grep -c /boot /etc/fstab ) -eq 0 ]; then
            echo "Error: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log
        fi
    fi


        patchPolkit
        
        }
############################## 1.0-1.1 fix END   ###################################

        version102x() {

    insrem() {

        for s in $@; do
            [ -e $s -o -e /etc/init.d/$s ] && insserv -r $s >/dev/null 2>&1 || :
        done

    }
            1011f 
            echo "updating to 1.0 Beta 2"

            btrfs-auto-snapshot destroy root/@safe &>/dev/null; btrfs-auto-snapshot destroy home/@safe &>/dev/null

            find /etc -iname \*.dpkg-new | xargs -L1 rm -f
            find /var/tmp/xbian_update/files_to_overwrite -type l -printf "/%P\n" | xargs -L1 rm -f
            cp -arP --remove-destination /var/tmp/xbian_update/files_to_overwrite/* /

            if [ "$(blkid -o value -s TYPE $(findmnt -n -v -o SOURCE /))" = btrfs ]; then
                if btrfs-auto-snapshot listvol | grep -xq modules; then
                    echo "modules volume already exists"
                    if ! mountpoint -q /lib/modules; then
                        mv /lib/modules /lib/modules.old
                        mkdir /lib/modules; mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) /lib/modules
                        for m in $(ls /lib/modules.old); do
                            [ -e /lib/modules/$m ] ||  mv /lib/modules.old/$m /lib/modules/$m
                        done
                        rm -fr /lib/modules.old
                    fi
                else
                    echo "moving modules directory"
                    btrfs-auto-snapshot createvol modules > /dev/null 2>&1
                    btrfs-auto-snapshot createvol modules/@ > /dev/null 2>&1
                    td=$(mktemp -d)
                    if mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) $td 2>/dev/null; then
                	cp -ar /lib/modules/* $td > /dev/null 2>&1
                        umount $td
                        rm -fr /lib/modules/*
                        if mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) /lib/modules; then
                            echo "done"
                        else
                            echo "something wrong happened, your xbian may not boot successfully after restart. disabling restart after update finish"
                            touch /run/noreboot
                        fi
                    fi
                fi
            fi

            echo "updating services"
            #rcS.d
            insrem hostname.sh kmod procps bootmisc.sh rpcbind udev checkfs.sh checkroot.sh \
                mountall-bootclean.sh mountall.sh mountdevsubfs.sh mountkernfs.sh mtab.sh kbd switch_cpu_governor

            #rc2.d
            insrem ifplugd bootlogs cron anacron ntp ssh nrg-tools iguanaIR rsync avahi-daemon networking console-setup mountnfs.sh motd openbsd-inetd  > /dev/null 2>&1
            insrem loadcpufreq cpufrequtils hdparm hwclock.sh plymouth-log udev-mtab urandom sudo plymouth rmnologin > /dev/null 2>&1

            #rc6.d
            insrem /etc/init.d/kexec > /dev/null 2>&1
            insrem /etc/init.d/kexec-load > /dev/null 2>&1
            insrem /etc/init.d/kbd  > /dev/null 2>&1
            insrem xbian-waiter > /dev/null 2>&1
            insrem rsyslog fake-hwclock autofs > /dev/null 2>&1
            insrem rsync ntp anacron networking > /dev/null 2>&1

            insserv -f -d sendsigs >/dev/null 2>&1

            rm -f /etc/init.d/rpcbind > /dev/null 2>&1
            rm -f /etc/init/xbmc-screensaver-wait.conf > /dev/null 2>&1
            rm -f /etc/init/dbus-reconnect.conf > /dev/null 2>&1

            rmo
            rm -fr /etc/apt/apt.conf.d/50raspi
            rm -fr /etc/apt/sources.list.d/raspi.list

            insserv -f umountnfs.sh  > /dev/null 2>&1
            insserv -f > /dev/null 2>&1
            initctl -q reload-configuration >/dev/null 2>&1

            echo "updating modules"

            sed -i --follow-symlinks '/frandom/d' /etc/modules
            sed -i --follow-symlinks '/bcm2708-rng/d' /etc/modules
            sed -i --follow-symlinks '/deadline-iosched/d' /etc/modules
            sed -i --follow-symlinks '/cfq-iosched/d' /etc/modules
            sed -i --follow-symlinks '/usb_storage/d' /etc/modules
            sed -i --follow-symlinks '/vchiq/d' /etc/modules

            #grep -qw lirc_rpi /etc/modules || echo "lirc_rpi" >>  /etc/modules

            grep -iv ^"AddressFamily" /etc/ssh/sshd_config > /etc/ssh/sshd_config.new
            grep -iv ^"UseDNS" /etc/ssh/sshd_config.new > /etc/ssh/sshd_config.new.2
            rm -f /etc/ssh/sshd_config.new
            echo "AddressFamily inet" >> /etc/ssh/sshd_config.new.2
            echo "UseDNS no" >> /etc/ssh/sshd_config.new.2
            mv /etc/ssh/sshd_config.new.2 /etc/ssh/sshd_config

            if ! grep -wq "root=/dev/nfs" /proc/cmdline; then
                echo "checking interfaces"
                if grep "auto" /etc/network/interfaces | grep -q "eth0"; then
                    :
                else
                    if ip link show eth0 | grep -q "state UP" && ip addr show eth0 | grep -wq inet ; then
                        echo "auto eth0" > /etc/network/interfaces.new
                        cat /etc/network/interfaces >> /etc/network/interfaces.new
                        mv /etc/network/interfaces.new /etc/network/interfaces
                    fi
                fi
            fi

            chmod -x /etc/network/if-up.d/mountnfs
            chmod -x /etc/network/if-up.d/openssh-server
            chmod -x /etc/network/if-up.d/upstart

            echo "patching files"
            for f in $(ls /var/tmp/xbian_update/diffs/*_1012 2>/dev/null); do
                if patch -s -N --dry-run -p0 < $f > /dev/null 2>&1; then
                    patch -s -p0 < $f || { echo "patch $f failed"; echo "patch $f failed" >> /home/xbian/xbian-update.log; }
                fi
            done

            while read line; do 
                [ -n "$line" ] && grep -v "$line" /etc/sysctl.conf > /etc/sysctl.conf.new
                mv /etc/sysctl.conf.new /etc/sysctl.conf
            done < /var/tmp/xbian_update/pchanges/sysctl.conf

            find /etc/ -iname \*~ | xargs -L1 rm -f > /dev/null 2>&1

            #echo "changing virtual filesystem parameters and recreating initramfs.gz."
            #dpkg-trigger --no-await trigger-xbian-update-initramfs
            #xbian-update-initramfs > /dev/null 2>&1

            if grep -wq "/tmp" /etc/fstab; then
                grep -wv "/tmp" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq 'root/@' /etc/fstab; then
                grep -wv 'root/@' /etc/fstab >> /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq '/sys/kernel/security' /etc/fstab; then
                grep -wv '/sys/kernel/security' /etc/fstab >> /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq '/sys/kernel/debug' /etc/fstab; then
                grep -wv '/sys/kernel/debug' /etc/fstab >> /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

#            if [ $(grep -w '/dev/root' /etc/fstab | grep -wc '/home') -ne 1 -o $(grep -w '/dev/root' /etc/fstab | grep -w '/home' | grep -c 'subvol=') -ne 1 ]; then
                if grep -wq "/home" /etc/fstab; then
                    grep -wv "/home" /etc/fstab > /etc/fstab.new
                    mv /etc/fstab.new /etc/fstab
                fi
                echo "/dev/root             /home                   xbian   subvol=home/@,noatime,nobootwait           0       0" >> /etc/fstab
#            fi

            if grep -wq "/lib/modules" /etc/fstab; then
                grep -wv "/lib/modules" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi
            echo "/dev/root             /lib/modules            xbian   subvol=modules/@,noatime,nobootwait        0       0" >> /etc/fstab

            if grep -wq "/" /etc/fstab; then
                grep -wv "/" /etc/fstab > /etc/fstab.new
                grep ^'//' /etc/fstab >> /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi
            echo "/dev/root             /                       xbian   noatime,nobootwait                         0       0" >> /etc/fstab

            if grep -wq "/proc" /etc/fstab; then
                grep -wv "/proc" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            grep -wv "/boot" /etc/fstab > /etc/fstab.new
            mv /etc/fstab.new /etc/fstab
            echo "$bp        /boot                   xbian   rw,nobootwait                              0       1" >> /etc/fstab

            if ! grep -wq "/run/user" /etc/fstab; then
                echo "none            /run/user                       tmpfs                   noauto                  0       0" >> /etc/fstab
            fi
            if ! grep -wq "/run/shm" /etc/fstab; then
                echo "none            /run/shm                        tmpfs                   noauto                  0       0" >> /etc/fstab
            fi
            if ! grep -wq "/run/lock" /etc/fstab; then
                echo "none            /run/lock                       tmpfs                   noauto                  0       0" >> /etc/fstab
            fi

            sed -i 's%http://ivka57.dyndns-ip.com%http://xbian.brantje.com/devel%g' /etc/apt/sources.list

            grep -v ^$ /etc/fstab | sort > /etc/fstab.new
            mv /etc/fstab.new /etc/fstab

            if test -e /etc/dhcp/dhclient.conf; then
        	grep -qv ^"initial-interval\|reboot\|script" /etc/dhcp/dhclient.conf > /etc/dhcp/dhclient.new
                echo "initial-interval 1;" >> /etc/dhcp/dhclient.new
                echo "reboot 4;" >> /etc/dhcp/dhclient.new
                echo "script \"/etc/xbian-udhcpc/dhclient-script-xbian\";" >> /etc/dhcp/dhclient.new
                mv /etc/dhcp/dhclient.new /etc/dhcp/dhclient.conf
            fi

            rm -f /usr/bin/vchiq_test /usr/bin/vcdbg /usr/bin/vcgencmd 

            if [ -f /boot/config.txt ]; then
            	grep -q ^"initial_turbo" /boot/config.txt || echo "initial_turbo=3" >> /boot/config.txt
            fi

            grep -q ^"ssh " /etc/inetd.conf || echo "
ssh  stream  tcp  nowait  root   /usr/sbin/tcpd /usr/sbin/sshd -i
" >> /etc/inetd.conf

            [ "$(/usr/local/lib/xbmc/xbmc.bin --version | grep -o [0-9]* | grep -m1 .)" -le 12 ] && adaptAdvancedSettings
            { sleep 1; echo raspberry; echo raspberry; } | smbpasswd -s -a xbian

            grep -q "APT::Periodic::Unattended-Upgrade" /etc/apt/apt.conf.d/10xbian-periodic 2>/dev/null || echo "APT::Periodic::Unattended-Upgrade \"0\";" >> /etc/apt/apt.conf.d/10xbian-periodic
            grep -q "APT::Periodic::Update-Package-Lists" /etc/apt/apt.conf.d/10xbian-periodic 2>/dev/null || echo "APT::Periodic::Update-Package-Lists \"1\";" >> /etc/apt/apt.conf.d/10xbian-periodic

            echo "1.0RC2" > /etc/xbian_version
            
            sed -i 's/http\:\/\/xbian.brantje.com\/devel wheezy main/http\:\/\/xbian.brantje.com stable main/g' /etc/apt/sources.list
    	    sed -i 's/KEEPAPT=.*/KEEPAPT=3/' /etc/default/xbian-snap

            xbianGroups

            sed -i '/\/net.*hosts/d' /etc/auto.master
            if [ -f /boot/config.txt ]; then
            	sed -i 's/gpu_mem_256=.*/gpu_mem_256=100/' /boot/config.txt
	    	set -i 's/0x00a00000/0x0a000000/' /boot/config.txt
	    fi

            [ ! -e /etc/default/nfs-common ] && cp /var/tmp/xbian_update/pchanges/nfs-common /etc/default 

            patchPolkit

        }

############################## 1.0.2-x END   ###################################
        
        [ -e /tmp/xbian-update-prev.ver ] && . /tmp/xbian-update-prev.ver
        [ -n "$version" ] || version='1000'
        while test $(($version / 1000)) -eq 0; do version=$(($version *10)); done

        if [ -e /run/xbian-update-force ]; then
            version='1000'
            rm /tmp/xbian_revision.old || :
        fi

        [ $version -lt 1011 ] && version1011
        [ $version -lt 1031 ] && version102x

        rmlibshairport

	if [ -e /dev/rtc0 ]; then
	    grep -q "UTC" /etc/default/rcS || echo -e "\nUTC=yes\n" >> /etc/default/rcS
	fi

cat /proc/cpuinfo | grep -i hardware |grep -q BCM2708 && platform='RPI'
[ -z "$platform" ] && platform='iMX6'

case $platform in
    RPI)
        if grep -wq "rootfstype=btrfs" /proc/cmdline; then

            # update cmdline.txt subvol parameter to what it was during boot
            if grep -q rootfsopts /boot/cmdline.txt.old 2>/dev/null; then
                subvolume=$(cat /boot/cmdline.txt.old); subvolume=${subvolume#*rootfsopts=subvol=}; subvolume=${subvolume%%\/@*};
                snap=$(cat /boot/cmdline.txt.old); snap=${snap#*rootfsopts=subvol=$subvolume"/@"}; snap=${snap%%,*};
            elif grep -q rootflags /boot/cmdline.txt.old 2>/dev/null; then
                subvolume=$(cat /boot/cmdline.txt.old); subvolume=${subvolume#*rootflags=subvol=}; subvolume=${subvolume%%\/@*};
                snap=$(cat /boot/cmdline.txt.old); snap=${snap#*rootflags=subvol=$subvolume"/@"}; snap=${snap%%,*}; 
            fi
        
            [ -z "$subvolume" ] && subvolume=root
            if [ -e /boot/cmdline.new ]; then
                cat /boot/cmdline.new | eval $(echo "sed 's%rootflags=subvol=root\/@%rootflags=subvol=$subvolume\/@$snap%'") > /boot/cmdline.txt
                mv /boot/cmdline.txt /boot/cmdline.new

                rootdev=$(cat /boot/cmdline.txt.old); rootdev=${rootdev##*root=}; rootdev=${rootdev%% *}
                #echo $rootdev | grep -q 'LABEL\|UUID' && { findfs $rootdev && rootdev=$(findfs $rootdev); }
                cat /boot/cmdline.new | eval $(echo "sed 's%root=/dev/mmcblk0p2%root=$rootdev%'") > /boot/cmdline.txt
                rm /boot/cmdline.new
            fi

        else
            [ -e /boot/cmdline.txt.old ] && mv /boot/cmdline.txt.old /boot/cmdline.txt
        fi
        if grep -q 'compress=lz4' /proc/cmdline; then
            sed -i 's/compress=lzo/compress=lz4/g' /boot/cmdline.txt || :
        fi
        ;;
    iMX6)
        ;;
    *)
        ;;
esac

###############################################################################
#        sed -i 's%console=.*? %console=tty7%' /boot/cmdline.txt

	chown -Rc xbian:xbian /home/xbian >/dev/null 2>&1
	rm -fr /var/tmp/xbian_update


	if ! status -q xbian-update-reboot; then
cat << \EOF > /tmp/xbian-update-reboot
#!/bin/sh

set +e

while { pgrep dpkg >/dev/null|| pgrep apt-get >/dev/null; } ; do sleep 5; done
[ ! -e /run/noreboot ] ||  exit 0
test -x /etc/init.d/xbmc && /etc/init.d/xbmc stop &>/dev/null
test -e /etc/init/xbmc.conf && stop -q xbmc
echo "XBian update completed, rebooting in 30s..."
[ -e /run/nosplash ] || /usr/bin/splash --infinitebar --msgtxt="stopping services..."
echo "Stopping services..."
for f in $(ls /etc/rc2.d/S* | sort -r); do
	[ -x $f ] && $f stop
done
umount /boot
[ -e /run/nosplash ] || /usr/bin/splash --infinitebar --msgtxt="reboot in 30s..."
echo "Reboot in 30s..."
sleep 30
sync
reboot -f

EOF
	    chmod +x /tmp/xbian-update-reboot
	    /tmp/xbian-update-reboot &
	else
	    start -q xbian-update-reboot
	fi

        sync
        echo "xbian-update" >>  /var/run/reboot-required

elif [ $1 = triggered ]; then

:

fi

exit 0
